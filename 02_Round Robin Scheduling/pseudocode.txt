{ Nama    : Bostang Palaguna }
{ NIM 	  : 13220055 }
{ Tanggal : Selasa, 25 Januari 2022 ; Rabu, 26 Januari 2022 }

Program RRS (Round robin scheduling)
{ Program yang mensimulasikan algoritma scheduling : round-robin  }
KAMUS
	{ Variabel }
		waktuKedatangan : array[0..maxSize-1] of integer { array yang menyimpan informasi waktu kedatangan dari tiap proses }
		waktuEksekusi : array[0..maxSize-1] of integer { array yang menyimpan informasi waktu eksekusi dari tiap proses }
		nProses: integer { banyaknya proses yang akan di-schedule }
		tKuantum : integer { ukuran kuantum waktu }

	{ Konstanta }
		maxSize : integer := 10 { maksimum banyaknya proses yang ada (10 dipilih secara sembarang) }
		EMPTY : integer := 9999 { indeks boneka yang menyatakan kosong }
		timeLimit : integer := 99999

	{ Fungsi/Prosedur }
		procedure cetakTimeProcessTable(input waktuEksekusi, waktuKedatangan: array[0..n-1] of integer)
			{ mencetak time-process table dari proses yang telah di-input }
		procedure ganttChart(input waktuEksekusi, waktuKedatangan: array [0..n-1] of integer)
			{ realisasi algoritma RRS dan mencetaknya dalam bentuk Gantt-chart }
		function isInArray(integer i, array[0..n-1] of integer arri) -> boolean
			{ mengembalikan true bila n terdapat di arri }
		procedure cetakAntrian(input antrian: array[0..n-1] of integer, x, y : integer)
			{ mencetak P{k} dari array of integer yang memiliki elemen k }
		procedure swapElement(array[0..maxSize-1] of integer; integer: a, b) 
			{ prosedur untuk menukar 2 elemen pada sebuah array }
		procedure geserSiklik(input arri: array[0..maxSize-1] of integer, x : integer ) 
			{ menggeser elemen pada suatu array ke kiri dengan bayangan array tersebut siklik (elemen pertama terhubung langsung) 
			dengan element terakhir. x adalah banyaknya elemen array yang tak kosong.
			array akan dibuat dipepet ke kiri, artinya tidak ada elemen kosong yang berindeks
			lebih kecil dari elemen tak kosong. asumsi awal array sudah pepet kiri }
		procedure removeElement(input arri : array[0..maxSize-1] of integer, indexRemove)
			{ menghapus elemen dari suatu array of integer dan menggantikannya dengan sebuah
			nilai yang ditetapkan sebagai EMPTY. Array hasil sedemikian rupa sehingga tidak ada
			EMPTY di tengah-tengah elemen non-EMPTY }
		function minArray(int arri[0..maxSize-1]) -> integer
			{ mencari nilai minimum dari suatu array of integer }
		function countElem(arri : arry [0..maxSize-1] of integer) -> integer
			{ menghitung banyaknya elemen dari suatu array yang tidak kosong }
		procedure cetakBaris(waktu : integer, antrian : array [0..maxSize-1] of integer, readyqueue : array [0..maxSize-1] of integer)
			{ mencetak baris dalam gantt-chart pada suatu waktu }
ALGORITMA UTAMA

	{ inisiasi nilai dari array waktuKedatangan dan waktuEksekusi mejadi nol semua }

for (k = 0 to k = maxSize-1) do
	waktuKedatangan[k] <- EMPTY
	waktuEksekusi[k] <- EMPTY

	{ menerima input dari user proses apa aja yang ada serta arriving time dan executing time }
input(nProses)
for (k = 0 to k = nProses-1) do
	input(waktuKedatangan[k])
	input(waktuEksekusi[k])

input(tKuantum)

	{ Mencetak time-process table }
cetakTimeProcessTable(waktuKedatangan,waktuEksekusi)

	{ mencetak Gantt-chart yang menggambarkan waktu, antrian, dan proses yang sedang dijalankan }
ganttChart(waktuKedatangan, waktuEksekusi)

REALISASI FUNGSI/PROSEDUR

function minArray(int arri[0..maxSize-1]) -> integer
	KAMUS LOKAL
		{ Variabel }
			min : integer { nilai minimum sementara }
	ALGORITMA
	int min = arri[0];

	for (int k = 1 to maxSize-1) do
		if (arri[k] != EMPTY) then
			if (arri[k] < min) then
				min <- arri[k]
	-> min

function countElem(arri : arry [0..maxSize-1] of integer) -> integer
	KAMUS LOKAL
		count : integer { pencacah }
	ALGORITMA
	count <- 0
	for (k = 0 to k = maxSize - 1) do
		if (arri[k] != EMPTY) then
			count <- count + 1
	-> count

procedure swapElement(array[0..maxSize-1] of integer; integer: a, b)
	KAMUS LOKAL
		{ Variabel }
			temp : integer
	ALGORITMA
	temp <- arri[a]
	arri[a] <- arri[b]
	arri[b] <- temp

procedure geserSiklik(input arri: array[0..maxSize-1] of integer, x : integer ) 
	KAMUS LOKAL
	ALGORITMA
		{ langkah 1 : menggeser secara siklik }
	for (k = 0 to k = maxSize - 2) do
		swapElement(arri,k,k+1)

	swapElement(arri,x-1,maxSize-1)

procedure removeElement(input arri : array[0..maxSize-1] of integer, indexRemove)
	KAMUS LOKAL
	ALGORITMA
		{ langkah 1 : mengapungkan elemen ke ujung array }
	for (k = indexRemove to k = maxSize-1) do
		swapElement(arri,k,k+1)
		{ langkah 2 : menghapus elemen yang paling ujung }
	arri[maxSize-1] <- EMPTY

procedure geserSiklik(input arri: array[0..maxSize-1] of integer, x : integer ) 
	KAMUS LOKAL
	ALGORITMA
		{ langkah 1 : menggeser secara siklik }
	for (int k = 0 to k = maxSize-2) do
		swapElement(arri,k,k+1)
		
		{ langkah 2 : pepet elemen tak kosong ke kiri }
	swapElement(arri,x-1,maxSize-1)

procedure removeElement(input arri : array[0..maxSize-1] of integer, indexRemove)

procedure cetakTimeProcessTable(input waktuKedatangan, waktuEksekusi : array [0..n-1] of integer)
	KAMUS LOKAL
	ALGORITMA
	output('Proses \t Waktu Kedatangan \t Waktu Eksekusi\n')
	for (k = 0 to k = n-1) do
		output('P{k} \t waktuKedatangan[k] \t waktuEksekusi[k]')

function isInArray(integer i, array[0..n-1] of integer arri) -> boolean
	KAMUS LOKAL
	ALGORITMA
	for (k = 0 to k = n-1 ) do
		if (arri[k] = i) then
			-> True
	-> False

procedure cetakAntrian(input antrian: array[0..n-1] of integer, x,y : integer)
	KAMUS LOKAL
	ALGORITMA 
		{ telah dipastikan bahwa setiap elemen array antrian berbeda-beda dan merujuk kepada proses }
	for (k = 0 to k = nProses-1) do
		if (antrian[k] != EMPTY) then
			output(antrian[k])
		if (antrian[k+1] != EMPTY ) then
			output(" ") { mencetak spasi bila belum elemen terujung }

procedure cetakBaris(waktu : integer, antrian : array [0..maxSize-1] of integer, readyqueue : array [0..maxSize-1] of integer)
	KAMUS LOKAL
	ALGORITMA
	output(waktu \t)
	cetakAntrian(antrian,first,indexreadyqueue)
	output(\t)
	if (readyqueue[0] != EMPTY) then
		for (k = 0 to k = nProses-1)
			if (readyqueue[k] != EMPTY) then
				output("P",readyqueue[k])
			if (readyqueue[k+1] != EMPTY) then
				output(", ")

procedure ganttChart(input waktuEksekusi, waktuKedatangan: array [0..n-1] of integer)
	KAMUS LOKAL
		kondisiGeser : boolean
			{ flag agar antrian tidak digeser ketika bar	saja ada elemen yang dihapus }
		antrian : array [0..n-1] of integer
			{ array atrian proses }
		telahProses : array[0..n-1] of integer
			{ lama waktu yang telah berlangsung untuk masing-masing proses }
		waktu : integer
		lastInterrupt : integer
			{ waktu terakhir kali mencapai kuantum waktu }
		readyqueue : array [0..n-1] of integer
			{ array yang menyatakan proses yang telah selesai dijalankan }
		indexreadyqueue : integer
			{ index pada array readyqueue yang akan digunakan juga ketika pencetakan elemen antrian }
		indexantrian : integer
			{ jumlah elemen pada array antrian }
		tempwaktuEksekusi : array[0..maxSize-1] of integer
			{ array waktu eksekusi masing-masing proses (yang ikut digeser bersama dengan antrian) }

	ALGORITMA
		{ inisiasi nilai variabel }
	waktu <- 0
	lastInterrupt <- minArray(waktuKedatangan)
	indexreadyqueue <- 0
	indexantrian <- 0
	kondisiGeser <- true
	for (k = 0 to k = n-1) do
		readyqueue[k] <- EMPTY
		telahProses[k] <- EMPTY
		antrian[k] <- EMPTY

		{ mencetak header gantt-chart }
	output('Waktu \t Antrian \t selesai')

		{ mencetak baris gantt-chart sekaligus menjalankan algoritma RRS }
	while(indexreadyqueue < nProses and waktu < timeLimit) do { terus lakukan sampai semua proses telah dijalankan }

		{ mengurusi proses yang telah SELESAI dijalankan }
			{ proses yang telah selesai harus dimasukkan ke readyqueue dan dihapus dari antrian }
		if (telahProses[first] = (waktuEksekusi[first])) then
			readyqueue[indexreadyqueue] = antrian[0]
			indexreadyqueue <- indexreadyqueue + 1
			removeElement(telahProses,0)
			removeElement(antrian,0)
			kondisiGeser <- false

		{ ketika sudah mencapai kuantum waktu atau suatu proses telah selesai dijalankan }
		if (waktu - lastInterrupt >= tKuantum) or ((telahProses[first]) >= (waktuEksekusi[first])) then
			geserSiklik(antrian, countElem(antrian))
			geserSiklik(telahProses, countElem(telahProses))
			geserSiklik(tempwaktuEksekusi,countElem(tempwaktuEksekusi))

		kondisiGeser <- true

		if (!(isInArray(waktu, waktuKedatangan))) { tidak dilakukan ketika ada proses yang datang pada waktu tersebut }
		{
			cetakBaris(waktu, antrian, readyqueue)
		}

		lastInterrupt <- waktu

		{ Ada proses yang masuk ke queue }
			{ ketika ada proses yang masuk ke queue, last harus bergeser }
		for (k = 0 to k = nProses-1) do
			if (waktu = waktuKedatangan[k]) then
				antrian[indexantrian] = k
				telahProses[indexantrian] = 0
				indexantrian <- indexantrian + 1
	
		for (k = 0 to k = nProses-1) do
			if (antrian[k] != EMPTY) then
				tempwaktuEksekusi[k] <- waktuEksekusi[antrian[k]]

		{ mencetak baris baru dalam gantt-chart }
		if ((indexreadyqueue = nProses) or isInArray(waktu, waktuKedatangan)) then
			cetakBaris(waktu, antrian, readyqueue)

		if (telahProses[0] != EMPTY) then
			telahProses[0] <- telahProses[0] + 1

		waktu <- waktu + 1